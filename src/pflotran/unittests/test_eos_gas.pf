module Test_EOS_Gas_module

  use pFUnit_mod
  use EOS_Gas_module

  implicit none

#include "petsc/finclude/petscsys.h"

  public :: Test_EOS_Gas

  interface Test_EOS_Gas
     module procedure newTest_EOS_Gas
  end interface Test_EOS_Gas

  @TestCase
  type, extends(TestCase) :: Test_EOS_Gas
     procedure(runMethod), pointer :: userMethod => null()
   contains
     procedure :: setUp
     procedure :: tearDown
     procedure :: runMethod
  end type Test_EOS_Gas

contains

! ************************************************************************** !

  function newTest_EOS_Gas(name, userMethod) result(test)

    implicit none

    character(len=*), intent(in) :: name
    procedure(runMethod) :: userMethod

    type(Test_EOS_Gas) :: test

    call test%setName(name)
    test%userMethod => userMethod

  end function newTest_EOS_Gas

! ************************************************************************** !

  subroutine setUp(this)
    implicit none
    class (Test_EOS_Gas), intent(inout) :: this

    call EOSGasInit()

  end subroutine setUp

! ************************************************************************** !

  subroutine tearDown(this)
    implicit none
    class (Test_EOS_Gas), intent(inout) :: this
    ! Destroy calls would go here
  end subroutine tearDown

! ************************************************************************** !

  subroutine runMethod(this)
    implicit none
    class (Test_EOS_Gas), intent(inout) :: this
    call this%userMethod()
  end subroutine runMethod

! ************************************************************************** !

  @Test
  subroutine testEOSGas_VerifyDefault(this)
    !
    ! verify that the default from EOSGasInit passes the verify
    ! test.
    !
    use PFLOTRAN_Constants_module, only : MAXSTRINGLENGTH

    implicit none

    class (Test_EOS_Gas), intent(inout) :: this

    PetscErrorCode :: ierr
    character(len=MAXSTRINGLENGTH) :: error_string

    call EOSGasVerify(ierr, error_string)
    @assertEqual(0, ierr)

  end subroutine testEOSGas_VerifyDefault

! ************************************************************************** !

  @Test
  subroutine testEOSGas_IdealDensity(this)
    !
    ! verify that the EOSGasSetDensityConstant() followed by
    ! EOSGasDensityIdeal() correctly returns the correct density
    !
    use PFLOTRAN_Constants_module, only : MAXSTRINGLENGTH

    implicit none

    class (Test_EOS_Gas), intent(inout) :: this

    PetscErrorCode :: ierr
    character(len=MAXSTRINGLENGTH) :: error_string

    PetscReal, parameter :: correct_density = 7.7058690453347650d-2
    PetscReal, parameter :: correct_dden_dt = -2.5985058321816783d-4
    PetscReal, parameter :: correct_dden_dp = 4.0557205501761923d-7
    PetscReal, parameter :: temperature = 23.4d0
    PetscReal, parameter :: pressure = 1.9d5
    PetscReal :: density
    PetscReal :: dden_dp ! derivative with respect to pressure
    PetscReal :: dden_dt ! derivative with respect to temperature

    call EOSGasSetDensityIdeal()

    call EOSGasVerify(ierr, error_string)
    @assertEqual(0, ierr)

    call EOSGasDensity(temperature, pressure, density, dden_dt, dden_dp, ierr)
    @assertEqual(correct_density, density, 1.0d-16)
    @assertEqual(correct_dden_dp, dden_dp, 1.0d-16)
    @assertEqual(correct_dden_dt, dden_dt, 1.0d-16)

  end subroutine testEOSGas_IdealDensity

! ************************************************************************** !

  @Test
  subroutine testEOSGas_DensityRKS(this)
    ! 
    ! verify that the EOSGasSetDensity() followed by
    ! EOSGasDensityRKS() correctly returns the correct_density
    ! the derivatives are calculated in the Jacobian step.
    !
    use PFLOTRAN_Constants_module, only : MAXSTRINGLENGTH, UNINITIALIZED_DOUBLE

    implicit none

    class (Test_EOS_Gas), intent(inout) :: this

    PetscErrorCode :: ierr
    character(len=MAXSTRINGLENGTH) :: error_string

    PetscReal, parameter :: not_calculated_dden_dt = UNINITIALIZED_DOUBLE
    PetscReal, parameter :: not_calculated_dden_dp = UNINITIALIZED_DOUBLE
    PetscReal, parameter :: correct_density1 = 7.6981326805322534d-2
    PetscReal, parameter :: correct_density2 = 0.22973426422005402d0
    PetscReal, parameter :: correct_density3 = 0.85506278682136605d0
    PetscReal, parameter :: temperature1 = 23.4d0
    PetscReal, parameter :: pressure1 = 1.9d5
    PetscReal, parameter :: temperature2 = 40.01d0
    PetscReal, parameter :: pressure2 = 6.0d5
    PetscReal, parameter :: temperature3 = 5.09d0
    PetscReal, parameter :: pressure3 = 2.0d6
    PetscReal :: density1
    PetscReal :: density2
    PetscReal :: density3
    PetscReal :: dden_dt
    PetscReal :: dden_dp

    call EOSGasSetDensityRKS(PETSC_TRUE,41.67d0,2.1029d6,0.0d0,0.42747d0,0.08664d0)
    call EOSGasVerify(ierr, error_string)
    @assertEqual(0, ierr)

    call EOSGasDensity(temperature1, pressure1, density1, &
                       dden_dt, dden_dp, ierr)

    ! The newton iteration within EOSGasDensityRKS tolerance is 1d-10 to
    ! find the correct volume solution; thus, setting the tolerance to 1d-9.
    @assertEqual(correct_density1, density1, 1.0d-9)

    ! the derivatives are calculated in the Jacobian step.
    @assertEqual(not_calculated_dden_dt, dden_dt, 1.0d-16)
    @assertEqual(not_calculated_dden_dp, dden_dp, 1.0d-16)

    call EOSGasDensity(temperature2, pressure2, density2, &
                       dden_dt, dden_dp, ierr)
    @assertEqual(correct_density2, density2, 1.0d-9)

    call EOSGasDensity(temperature3, pressure3, density3, &
                       dden_dt, dden_dp, ierr)
    @assertEqual(correct_density3, density3, 1.0d-9)

  end subroutine testEOSGas_DensityRKS

end module Test_EOS_Gas_module

